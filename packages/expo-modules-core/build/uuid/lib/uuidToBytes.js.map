{"version":3,"file":"uuidToBytes.js","sourceRoot":"","sources":["../../../src/uuid/lib/uuidToBytes.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,CAAC,GAAW;IAC5B,OAAO,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAC3B,CAAC;AAED,SAAS,WAAW,CAAC,IAAY;IAC/B,+BAA+B;IAC/B,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAE5C,wCAAwC;IACxC,IAAI,YAAY,CAAC,MAAM,KAAK,EAAE,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;KACxC;IAED,MAAM,KAAK,GAAa,EAAE,CAAC;IAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;QAC9B,iDAAiD;QACjD,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;KAClD;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,eAAe,WAAW,CAAC","sourcesContent":["function hexToByte(hex: string): number {\n  return parseInt(hex, 16);\n}\n\nfunction uuidToBytes(uuid: string): number[] {\n  // Strip the UUID of its hypens\n  const strippedUuid = uuid.replace(/-/g, '');\n\n  // Ensure the UUID is 32 characters long\n  if (strippedUuid.length !== 32) {\n    throw new Error('Invalid UUID format');\n  }\n\n  const bytes: number[] = [];\n  for (let i = 0; i < 32; i += 2) {\n    // Convert each 2-character byte back to a number\n    bytes.push(hexToByte(strippedUuid.substr(i, 2)));\n  }\n\n  return bytes;\n}\n\nexport default uuidToBytes;\n"]}